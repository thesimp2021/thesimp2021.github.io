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
my perfect future of apps is entirely made by webz

i had a lot of fun doing math and computer problems, this is my love letter written fully in javascript,
the only language that im willing to worship just like my gf

my dram comes true making game, minimalist look but looking super modern


semarang (cinema) -> bangkok (coffee/restaurant) -> serbia(good picx, city views) -> bandung (puncak) -> bed netflix and chill

i hate frontend programming, but i manage to go through it, code deployment, project setup

this app is inspired by derekdelgaudio, identity "the rook/mechanic", the 5 thumbnail level display, rouletista

info per level: reward, required item, explanation

currentLevel, currentQuestionId, currentQuestionIsAnswered, currentQuestionAnsweredCorrectly
currentQuestionId = 5 -> generate filler question

onClick = handleAnswerClick({
    correct: currentQuestionId === 4 ? true : question.cAnswer === item.index,

})

onClickAnswerOption() => {
    setIsAnswered(true);
    setCorrectAnswer(correct ? canswers+1 : +0);
    setCurrentLevelCorrectAnswer(correct? clevelcanswer+1:+0)
    setMoney(prevMoney => questionId === 4 ? prevMoney+(nextItemPrice-prevMoney) : (correct ? prevMoney+level.reward : prevMoney+0))
}

nextQuestion = () => {
    setQuestionId(prevQuestionId => prevQuestion+1)
    setIsAnswered(false);
}

renderNextQuestionButton = currentLevelCorrectAnswer >=4 ? renderNextLevel : renderNextQuesiton

money is enough for next level -> button close level -> handleFinishLevel(resetAll)

FINISHLEVELRENDERLOGIC:
----
if (currentItem === netflix) {
    if(levelFinished === true) return finaleButton;
    return null
}

if (money === itemDatabase[currentLevel+1]) {
    return finishLevelButton
}

return null;
---


buttonnext muncul kalo udah kelar ditanya
correct answer display






















    const [unlockedLevels, setUnlockedLevels] = useState(1);
    const [bonusQuestion, setBonusQuestions] = useState(0);
    const [selectedQuestion, setSelectedQuestion] = useState(questionsDatabase[1]);

        const existingLevels = [1, 2, 3, 4, 5];




    const handleBonusQuestion = () => {
        setBonusQuestions(bonusQuestion + 1);
        return {author: "iqi ganteng"};
    }

    const incrementCount = () => {
        setUnlockedLevels(unlockedLevels + 1);
        setSelectedQuestion(() => {
            const balikan = questionsDatabase.find(question2 => question2.id === unlockedLevels + 1);

            return balikan || handleBonusQuestion();
        });
        // setSelectedQuestion(selectedQuestion+1);
    };

    const RenderLevel = ({unlockedLevels, currentLevel, handleLevelUp}) => {
        return (
            unlockedLevels > currentLevel - 1 &&
            <div>
                bacot {currentLevel}
                <button onClick={handleLevelUp}>+</button>
            </div>
        );
    }




    const RenderQuestion = ({question}) => {
        return (
            <div>{question.author}</div>
        );
    }

    const renderRame = () => {
        return (
            <div>
                <span>bonus level: {bonusQuestion}<br></br></span>
                <span>current level: {unlockedLevels}</span>
                {
                    existingLevels.map(level =>
                        <RenderLevel
                            unlockedLevels={unlockedLevels}
                            currentLevel={level}
                            handleLevelUp={incrementCount}
                        />
                    )
                }
                <RenderQuestion question={selectedQuestion}/>
            </div>
        );
    };